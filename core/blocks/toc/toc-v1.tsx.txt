"use client"

import React, { useEffect, useRef, useState } from "react"
import Link from "next/link"

import "./style.css"

interface Heading {
  slug: string
  text: string
  level: number
}

interface TOCProps {
  headings: Heading[]
}

const TOC: React.FC<TOCProps> = ({ headings }) => {
  const observer = useRef<IntersectionObserver | null>(null)
  const [activeId, setActiveId] = useState("")

  useEffect(() => {
    const handleObserver: IntersectionObserverCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setActiveId(entry.target.id)
        }
      })
    }

    observer.current = new IntersectionObserver(handleObserver, {
      rootMargin: "0% 0% 200px 0px",
    })

    const headingElements = document.querySelectorAll("h1, h2, h3, h4")
    headingElements.forEach((headingElement) =>
      observer.current?.observe(headingElement)
    )

    return () => {
      observer.current?.disconnect()
    }
  }, [])

  return (
    <aside className="toc">
      <nav data-name={headings.length > 0 ? "On this page" : ""}>
        {headings.map((heading) => (
          <Link
            key={`#${heading.slug}`}
            href={`#${heading.slug}`}
            passHref
            className={`toc-link ${activeId === heading.slug ? "active" : ""}`}
            data-level={heading.level}
            onClick={() => {
              const targetElement = document.getElementById(heading.slug)
              if (targetElement) {
                targetElement.scrollIntoView({ behavior: "smooth" })
              }
            }}
          >
            {heading.text}
          </Link>
        ))}
      </nav>
    </aside>
  )
}

export default TOC
