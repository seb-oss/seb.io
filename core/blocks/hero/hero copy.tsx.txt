"use client";
import "./style.css";
import { useEffect, useState } from "react";
import { compareDesc, format, parseISO } from "date-fns";
import { allMembers, Member } from "content";

function Member(member: Member) {
  const firstName = member.name.split(" ")[0];
  const department = member.department;
  const [position, setPosition] = useState({ randomX: -100, randomY: -100 });

  // Generate random values for hue, saturation, and lightness components of HSL color
  // const hue = Math.floor(Math.random() * 258);
  // const hue = Math.floor(Math.random() * 220);
  const saturation = Math.floor(Math.random() * 195);
  const lightness = Math.floor(Math.random() * 11) + 60;
  // Find the unique departments
  const uniqueDepartments = Array.from(
    new Set(allMembers.map((m) => m.department))
  );

  const hue = Math.floor(
    (uniqueDepartments.indexOf(department) / uniqueDepartments.length) * 360
  );

  // Construct HSL color string
  // const color = `hsl(${hue}, ${saturation}%, 62%)`;
  const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`;

  useEffect(() => {
    const heroElement = document.querySelector(".hero") as HTMLElement;
    const width = heroElement?.offsetWidth ?? 0;
    const height = heroElement?.offsetHeight ?? 0;

    const intervalId = setInterval(() => {
      const randomX = Math.floor(Math.random() * width);
      const randomY = Math.floor(Math.random() * height);
      setPosition({ randomX, randomY });
    }, 3000); // Update position every 3 seconds

    return () => {
      clearInterval(intervalId);
    };
  }, []);

  const cursorStyle = {
    "--color": color,
    "--top": `${position.randomY}px`,
    "--left": `${position.randomX}px`,
  } as React.CSSProperties;

  return (
    <div className="cursor" data-dep={department} style={cursorStyle}>
      {firstName}
    </div>
  );
}

export default function Hero() {
  const team = allMembers.sort((a, b) =>
    compareDesc(new Date(a.name), new Date(b.name))
  );

  return (
    <figure className="hero">
      <div className="code">{`</>`}</div>
      <div className="design">Tokens</div>
      <div className="docs">a11y</div>
      <button>
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
        <span contentEditable="true">I am a button</span>
      </button>
      <div className="cursors">
        {team.map((member, idx) => (
          <Member key={idx} {...member} />
        ))}
      </div>
    </figure>
  );
}
